# AI Agent Conversation

A collaborative AI agent system that solves problems through multi-agent conversation between a questioner (Agent A) and an answerer (Agent B).

## Overview

This project implements an iterative conversation between two AI agents to solve problems:
- **Agent A (Questioner)**: Asks questions and guides the problem-solving process using Google's Gemini model
- **Agent B (Answerer)**: Provides answers and solutions using OpenAI's ChatGPT model

The system visualizes the conversation in real-time using Streamlit, with color-coded messages and a clear display of the final solution.

## Features

- Interactive problem-solving through staged agent conversation
- Real-time visualization of the conversation flow
- Automatic detection of solutions in agent responses
- Color-coded UI for easy distinction between agents
- Maximum iteration limit to prevent infinite loops
- Clean, styled interface with Streamlit

## Requirements

- Python 3.8+
- Streamlit
- Google Generative AI Python SDK
- OpenAI Python SDK
- dotenv

## Installation

1. Clone the repository:
   ```
   git clone https://github.com/yourusername/ai-agent-conversation.git
   cd ai-agent-conversation
   ```

2. Install dependencies:
   ```
   pip install -r requirements.txt
   ```

3. Set up environment variables:
   Create a `.env` file in the project directory with your API keys:
   ```
   GEMINI_API_KEY=your_gemini_api_key
   OPENAI_API_KEY=your_openai_api_key
   ```

## Usage

1. Run the Streamlit application:
   ```
   streamlit run main.py
   ```

2. Enter a problem or question in the text area
3. Click "Start Conversation" to begin the agent interaction
4. Watch as the agents discuss and solve the problem
5. The final solution will be highlighted at the end of the conversation

## Project Structure

- `main.py`: Main application file with Streamlit UI and agent interaction logic
- `gemini.py`: Contains implementation for Agent A (questioner) using Gemini
- `chatgpt.py`: Contains implementation for Agent B (answerer) using ChatGPT
- `README.md`: Project documentation

## How It Works

1. The user inputs a problem or question
2. Agent A (Gemini) analyzes the problem and asks a clarifying question
3. Agent B (ChatGPT) responds with an answer
4. This cycle continues until a solution is reached or the maximum iteration count is hit
5. The final solution from Agent B is displayed prominently

## Solution Detection

The system detects solutions based on indicators such as:
- Presence of equations (e.g., "x =")
- Explicit solution statements (e.g., "solution is", "answer is")
- Logical conclusion indicators (e.g., "therefore", "final answer")
- Maximum iteration count reached (defaults to 5)

## Customization

You can modify the following aspects of the project:
- Change the styling in the CSS section of the `iterate_agents` function
- Adjust the maximum iteration count in the same function
- Add more solution detection patterns in the solution indicators list
- Modify the prompt templates in the agent implementation files

## Example Problems

The system works well with:
- Mathematical problems
- Logic puzzles
- Multi-step reasoning tasks
- Information retrieval questions
- Simple planning problems

## License

[Your chosen license]

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.